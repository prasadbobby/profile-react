{"version":3,"sources":["img/img.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","profile","data","profiles","console","log","className","map","value","index","key","src","Logo","alt","basic","name","role","onClick","window","location","href","phone","email","alert","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,iC,odC6CzC,IAAIC,EAAM,WACR,IAAIC,EAASC,EAAKC,SAGlB,OAFAC,QAAQC,IAAIJ,GAGR,yBAAKK,UAAU,8BAEPL,EAAQM,KAAI,SAACC,EAAMC,GAAP,OACR,yBAAKH,UAAU,8BAA8BI,IAAKD,GAClD,yBAAKH,UAAU,aACX,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,SACb,yBAAKK,IAAKC,IAAMC,IAAI,WAEtB,yBAAKP,UAAU,aACf,4BAAKE,EAAMM,MAAMC,MACjB,4BAAKP,EAAMM,MAAME,MACjB,wBAAIV,UAAU,OAAOW,QAAS,kBAAMC,OAAOC,SAASC,KAAK,sBAAsBZ,EAAMM,MAAMO,OAC3F,wBAAIJ,QAAS,kBAAMC,OAAOC,SAASC,KAAK,sCAAsCd,UAAU,eAAeE,EAAMM,MAAMQ,OACnH,4BAAQhB,UAAU,kBAAkBW,QAAS,kBAAMM,MAAMf,EAAMM,MAAMC,QAArE,oBA+BTS,EArFf,WAcI,OACE,yBAAKlB,UAAU,OAab,kBAAC,EAAD,QC1BYmB,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.8bfa6018.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.7539ac2d.jpg\";","import React from \"react\";\nimport \"./App.css\";\n// import Hooks from './components/Hooks';\n// import Greeting from \"./components/Greeting\";\nimport Logo from \"./img/img.jpg\";\n// import Welcome from \"./components/Welcome\";\n// import States from \"./components/States\";\n// import Counter from \"./components/Counter\";\nimport data from './data/data.json';  \n\nfunction App() {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       count: 0,\n//     };\n//   }\n//   increment = () => {\n//     this.setState({ count: this.state.count + 1 });\n//   };\n//   decrement = () => {\n//     this.setState({ count: this.state.count - 1 });\n//   };\n  // render() {\n    return (\n      <div className=\"App\">\n          {/* <h1>using hooks</h1>\n          <Hooks /> */}\n          {/* <button class=\"btn btn-primary\">Primary</button> */}\n        {/* <div className=\"division\">\n          <button onClick={this.increment}>+</button>\n          <button onClick={this.decrement}>-</button>\n        </div>\n        <h2>{this.state.count}</h2>\n        <div className=\"name\">BOBBY</div>\n        <div className=\"name2\">TASK</div>\n        <div className=\"name3\">APSSDC</div>\n        <div className=\"name4\">COUNTER</div> */}\n        <Home />\n      </div>\n    );\n  }\n\n\n\n  let Home =()=>{    \n    let profile= data.profiles;\n    console.log(profile);\n\n    return(\n        <div className=\"row justify-content-center\">\n            {\n                profile.map((value,index)=>(\n                    <div className=\"col-sm-10 col-md-4 col-lg-4\" key={index}>\n                    <div className=\"card data\">\n                        <div className=\"card-body boxer\">\n                        <div className=\"imgBx\">\n                          <img src={Logo} alt=\"Bobby\"/>\n                          </div>\n                        <div className=\"contentBx\">\n                        <h1>{value.basic.name}</h1>\n                        <h2>{value.basic.role}</h2>\n                        <h3 className=\"link\" onClick={() => window.location.href=\"tel:+919542109121\"}>{value.basic.phone}</h3>\n                        <h3 onClick={() => window.location.href=\"mailto:knvdurgaprasad610@gmail.com\"} className=\"email link1\">{value.basic.email}</h3>\n                        <button className=\"btn btn-primary\" onClick={() => alert(value.basic.name)}>Profile</button>\n                        </div>\n                        </div>\n\n                    </div>\n                    </div>\n\n                ))\n            }\n\n        </div>\n    );\n  }\n  // render() {\n  //   return (\n  //     <div className=\"new\">\n  //       <Greeting name=\"Bobby\" mail=\"bobby@apssdc.info\" />\n  //       <img src={Logo} alt=\"images\" style={{width:\"200px\"}}/>\n  //       <Greeting name=\"prasad\" mail=\"prasad@gmail.com\" />\n  //       <h1>We are creating class Component and Pass the the props</h1>\n  //       <Welcome name=\"Bobby\" college=\"DNR\"></Welcome>\n  //       <Welcome name=\"Prasad\" college=\"dnr college\"></Welcome>\n  //       <p>hai</p>\n  //       <States />\n  //       <Counter />\n\n  //     </div>\n  //   );\n  // }\n\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}